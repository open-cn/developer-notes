一 存储过程与函数的区别 


1 存储过程 

定义： 
存储过程（Stored Procedure ）是一组为了完成特定功能的SQL 语句集，经编译后存储在数据库中。用户通过指定存储过程的名字并给出参数（如果该存储过程带有参数）来执行它。 
优 点： 
A 存储过程只在创造时进行编译，以后每次执行存储过程都不需再重新编译，而一般SQL语句每执行一次就编译一次,所以使用存储过程可提高数据库执行速度。 
B 当对数据库进行复杂操作时(如对多个表进行Update、Insert、Query、Delete时），可将此复杂操作用存储过程封装起来与数据库提供的事务处理结合一起使用。存储过程可以从自己的存储过程内引用其它存储过程，这可以简化一系列复杂语句. 
C 安全性高,可设定只有某用户才具有对指定存储过程的使用权。 
D 存储过程可以接受参数、输出参数、返回单个或多个结果集以及返回值，可以向程序返回错误原因。   

2 合理使用存储过程与函数 

存储过程: 参数可以有三种模式(IN、OUT、IN OUT),可返回多个参数值.可在过程中调用另一个存储过程. 
函数: 函数只有一种(IN),因为使用函数的目的是传入0或多个参数，它只有一条RETURN语句，只能返回单一的值,,也可用Out来返回值.可在SQL语句（DML或SELECT）中调用. 

Oracle中的函数与存储过程的区别: 
A:函数必须有返回值,而过程没有. 
B:函数可以单独执行.而过程必须通过execute执行. 
C:函数可以嵌入到SQL语句中执行.而过程不行. 
其实我们可以将比较复杂的查询写成函数.然后到存储过程中去调用这些函数. 
Oracle中的函数与存储过程的特点: 
A. 一般来说，存储过程实现的功能要复杂一点，而函数的实现的功能针对性比较强。 
B.对于存储过程来说可以返回参数，而函数只能返回值或者表对象。 
C.存储过程一般是作为一个独立的部分来执行，而函数可以作为查询语句的一个部分来调用，由于函数可以返回一个表对象，因此它可以在查询语句中位于FROM关键字的后面。 

  区别：
名称		是否有返回值	是否可以单独执行	是否可以嵌入SQL语句中	  参数类型	   返回值类型  
存储过程	可以没有	可以                    不可以        IN   OUT  IN OUT  可以返回参数（一个或                                                                                                                    多个参数值）结果集、返回错误原因

自定义函数      必须有且只有一个  必须通过execute执行     可以 且位于FROM关键字的后面  只有IN     单一值或者一个表对象                                                                                                                                                 










触发器，存储过程和函数区别 
触发器是特殊的存储过程，存储过程需要程序调用，而触发器会自动执行；你所说的函数是自定义函数吧，函数是根据输入产生输出，自定义只不过输入输出的关系由用户来定义。在什么时候用触发器？要求系统根据某些操作自动完成相关任务，比如，根据买掉的产品的输入数量自动扣除该产品的库存量。什么时候用存储过程？存储过程就是程序，它是经过语法检查和编译的SQL语句，所以运行特别快。

存储过程和用户自定义函数具体的区别 
先看定义： 

存储过程
存储过程可以使得对数据库的管理、以及显示关于数据库及其用户信息的工作容易得多。存储过程是 SQL 语句和可选控制流语句的预编译集合，以一个名称存储并作为一个单元处理。存储过程存储在数据库内，可由应用程序通过一个调用执行，而且允许用户声明变量、有条件执行以及其它强大的编程功能。 
存储过程可包含程序流、逻辑以及对数据库的查询。它们可以接受参数、输出参数、返回单个或多个结果集以及返回值。 
可以出于任何使用 SQL 语句的目的来使用存储过程，它具有以下优点： 
可以在单个存储过程中执行一系列 SQL 语句。 


可以从自己的存储过程内引用其它存储过程，这可以简化一系列复杂语句。 


存储过程在创建时即在服务器上进行编译，所以执行起来比单个 SQL 语句快。 
用户定义函数
函数是由一个或多个 Transact-SQL 语句组成的子程序，可用于封装代码以便重新使用。Microsoft? SQL Server? 2000 并不将用户限制在定义为 Transact-SQL 语言一部分的内置函数上，而是允许用户创建自己的用户定义函数。 
可使用 CREATE FUNCTION 语句创建、使用 ALTER FUNCTION 语句修改、以及使用 DROP FUNCTION 语句除去用户定义函数。每个完全合法的用户定义函数名 (database_name.owner_name.function_name) 必须唯一。 
必须被授予 CREATE FUNCTION 权限才能创建、修改或除去用户定义函数。不是所有者的用户在 Transact-SQL 语句中使用某个函数之前，必须先给此用户授予该函数的适当权限。若要创建或更改在 CHECK 约束、DEFAULT 子句或计算列定义中引用用户定义函数的表，还必须具有函数的 REFERENCES 权限。 
在函数中，区别处理导致删除语句并且继续在诸如触发器或存储过程等模式中的下一语句的 Transact-SQL 错误。在函数中，上述错误会导致停止执行函数。接下来该操作导致停止唤醒调用该函数的语句。 
用户定义函数的类型
SQL Server 2000 支持三种用户定义函数： 
标量函数 


内嵌表值函数 


多语句表值函数 
用户定义函数采用零个或更多的输入参数并返回标量值或表。函数最多可以有 1024 个输入参数。当函数的参数有默认值时，调用该函数时必须指定默认 DEFAULT 关键字才能获取默认值。该行为不同于在存储过程中含有默认值的参数，而在这些存储过程中省略该函数也意味着省略默认值。用户定义函数不支持输出参数。 
标量函数返回在 RETURNS 子句中定义的类型的单个数据值。可以使用所有标量数据类型，包括 bigint 和 sql_variant。不支持 timestamp 数据类型、用户定义数据类型和非标量类型（如 table 或 cursor）。在 BEGIN...END 块中定义的函数主体包含返回该值的 Transact-SQL 语句系列。返回类型可以是除 text、ntext、image、cursor 和 timestamp 之外的任何数据类型。 
表值函数返回 table。对于内嵌表值函数，没有函数主体；表是单个 SELECT 语句的结果集。对于多语句表值函数，在 BEGIN...END 块中定义的函数主体包含 TRANSACT-SQL 语句，这些语句可生成行并将行插入将返回的表中。有关内嵌表值函数的更多信息，请参见内嵌用户定义函数。有关表值函数的更多信息，请参见返回 table 数据类型的用户定义函数。 
BEGIN...END 块中的语句不能有任何副作用。函数副作用是指对具有函数外作用域（例如数据库表的修改）的资源状态的任何永久性更改。函数中的语句唯一能做的更改是对函数上的局部对象（如局部游标或局部变量）的更改。不能在函数中执行的操作包括：对数据库表的修改，对不在函数上的局部游标进行操作，发送电子邮件，尝试修改目录，以及生成返回至用户的结果集。 
函数中的有效语句类型包括： 
DECLARE 语句，该语句可用于定义函数局部的数据变量和游标。 


为函数局部对象赋值，如使用 SET 给标量和表局部变量赋值。 


游标操作，该操作引用在函数中声明、打开、关闭和释放的局部游标。不允许使用 FETCH 语句将数据返回到客户端。仅允许使用 FETCH 语句通过 INTO 子句给局部变量赋值。 


控制流语句。 


SELECT 语句，该语句包含带有表达式的选择列表，其中的表达式将值赋予函数的局部变量。 


INSERT、UPDATE 和 DELETE 语句，这些语句修改函数的局部 table 变量。 


EXECUTE 语句，该语句调用扩展存储过程。 
在查询中指定的函数的实际执行次数在优化器生成的执行计划间可能不同。示例为 WHERE 子句中的子查询唤醒调用的函数。子查询及其函数执行的次数会因优化器选择的访问路径而异。 
用户定义函数中不允许使用会对每个调用返回不同数据的内置函数。用户定义函数中不允许使用以下内置函数： 
@@CONNECTIONS @@PACK_SENT GETDATE 
@@CPU_BUSY @@PACKET_ERRORS GetUTCDate 
@@IDLE @@TIMETICKS NEWID 
@@IO_BUSY @@TOTAL_ERRORS RAND 
@@MAX_CONNECTIONS @@TOTAL_READ TEXTPTR 
@@PACK_RECEIVED @@TOTAL_WRITE  



架构绑定函数
CREATE FUNCTION 支持 SCHEMABINDING 子句，后者可将函数绑定到它引用的任何对象（如表、视图和其它用户定义函数）的架构。尝试对架构绑定函数所引用的任何对象执行 ALTER 或 DROP 都将失败。 
必须满足以下条件才能在 CREATE FUNCTION 中指定 SCHEMABINDING： 
该函数所引用的所有视图和用户定义函数必须是绑定到架构的。 


该函数所引用的所有对象必须与函数位于同一数据库中。必须使用由一部分或两部分构成的名称来引用对象。 


必须具有对该函数中引用的所有对象（表、视图和用户定义函数）的 REFERENCES 权限。 
可使用 ALTER FUNCTION 删除架构绑定。ALTER FUNCTION 语句将通过不带 WITH SCHEMABINDING 指定函数来重新定义函数。 
调用用户定义函数
当调用标量用户定义函数时，必须提供至少由两部分组成的名称： 
SELECT *, MyUser.MyScalarFunction()FROM MyTable 
可以使用一个部分构成的名称调用表值函数： 
SELECT *FROM MyTableFunction() 
然而，当调用返回表的 SQL Server 内置函数时，必须将前缀 :: 添加至函数名： 
SELECT * FROM ::fn_helpcollations() 
可在 Transact-SQL 语句中所允许的函数返回的相同数据类型表达式所在的任何位置引用标量函数，包括计算列和 CHECK 约束定义。例如，下面的语句创建一个返回 decimal 的简单函数： 
CREATE FUNCTION CubicVolume-- Input dimensions in centimeters (@CubeLength decimal(4,1), @CubeWidth decimal(4,1), @CubeHeight decimal(4,1) )RETURNS decimal(12,3) -- Cubic Centimeters.ASBEGIN RETURN ( @CubeLength * @CubeWidth * @CubeHeight )END 
然后可以在允许整型表达式的任何地方（如表的计算列中）使用该函数： 
CREATE TABLE Bricks ( BrickPartNmbr int PRIMARY KEY, BrickColor nchar(20), BrickHeight decimal(4,1), BrickLength decimal(4,1), BrickWidth decimal(4,1), BrickVolume AS ( dbo.CubicVolume(BrickHeight, BrickLength, BrickWidth) ) ) 
dbo.CubicVolume 是返回标量值的用户定义函数的一个示例。RETURNS 子句定义由该函数返回的值的标量数据类型。BEGIN...END 块包含一个或多个执行该函数的 Transact-SQL 语句。该函数中的每个 RETURN 语句都必须具有一个参数，可返回具有在 RETURNS 子句中指定的数据类型（或可隐性转换为 RETURNS 中指定类型的数据类型）的数据值。RETURN 参数的值是该函数返回的值。 



