一.React架构分析
1）层次架构：
Java层：java层为逻辑入口，启动C++层的javascript解析器，执行js通过c++传递来的渲染指令，从而构建NativeUI等。

java层依赖于众多优秀开源库，在图片处理使用的是Fresco，网络通信使用的是okhttp，当然还有众多工具类，如Json解析工具jackson，Animation知名开源库NineOldAndroids，小而全的底层工具类bolts等，在java层均封装为Module。java层核心jar包是react-native.jar，封装了众多上层的interface，如Module，Registry，bridge等


C++层：c++层最主要是封装了JavaScriptCore，执行对js的解析。

基于JavaScriptCore，Web开发者可以尽情使用ES6的新特性，如class、箭头操作符等，而且 React Native运行在JavaScriptCore中的，完全不存在浏览器兼容的情况。Bridge桥接了java <> js 通信的核心接口。JSLoader主要是将来自assets目录的或本地file加载到javascriptCore，再通过JSCExectutor解析js文件。


Js层：主要处理事件分发及UI Layout

主要有以下几个部件：
Component：Js层通js/jsx编写的Virtual Dom来构建Component或Module
Virtual DOM是DOM在内存中的一种轻量级表达方式，可以通过不同的渲染引擎生成不同平台下的UI。
component的使用在 React 里极为重要, 因为component的存在让计算 DOM diff 更高效。

Lifecycle&Data：React 组件通过内部的 state 变量控制生命周期及事件回调。
如getInitialState方法用于定义组件初始状态，后续组件可通过 this.state 属性读取该状态。
当事件触发（或者主动调用setState方法更新数据）导致状态变化，this.setState 方法就修改状态值，每次修改以后，自动调用 this.render 方法，重新渲染组件。

Layout：React使用css-layout
css-layout使用javascript实现了flexbox，不依赖于DOM，能编译成Object-C或者Java，最终达到跨平台的展示目的，但暂时不支持css3，暂时只能支持简单的布局和普通的动画。


2）Js与Java通信机制：
在Java层与Js层的bridge分别存有相同一份模块配置表，Java与Js互相通信时，通过bridge里的配置表将所调用模块方法转为{moduleID,methodID,args}的形式传递给处理层，处理层通过bridge的模块配置表找到对应的方法执行，如果有callback，则回传给调用层。


二.从应用启动到页面加载完成分析

Core Class：

1.ReactInstanceManager：主要是用来创建及管理Catalyst的实例的上层接口，控制开发调试，生命周期与ReactRootView所在activity保持一致。

2.ReactRootView：为启动入口核心类，负责监听及分发事件并重新渲染元素，App启动后，其将作为App的root view。

3.CatalystInstance：顶级异步JSCAPI封装类，提供Java与Js互通的环境，通过ReactBridge将Svr的Js Bundle传送到Js引擎。

4.NativeModuleRegistry：Java层模块注册表，即暴露给Js的API集合。

5.JavascriptModuleRegistry：Js层模块注册表，负责将所有JavaScriptModule注册到CatalystInstance，通过Java动态代理调用到Js。

6.CoreModulePackage：定义核心框架模块，创建NativeModules&JsModules。

启动过程的解析：

1.在ReactInstanceManager时会配置应用所需的java模块与js模块之后，通过ReactRootView的startReactApplication启动APP。

2.在创建ReactInstanceManager同时会创建用于加载JsBundle的JSBundlerLoader，并传递给CatalystInstance。

3.CatalystInstance会创建Java模块注册表及Javascript模块注册表，并遍历实例化模块。

4.CatalystInstance通过JSBundlerLoader向Node Svr请求Js Bundle，并传递给JSCJavaScriptExectutor，最后传递给javascriptCore，再通过ReactBridge通知ReactRootView完成渲染。

三.Js与Java通信机制

Java与Js之间的调用，是以两边存在两边存在同一份模块配置表，最终均是将调用转化为{moduleID, methodID，callbackID，args}，处理端在模块配置表里查找注册的模块与方法并调用。

Java -> Js：Java通过注册表调用到CatalystInstance实例，透过ReactBridge的jni，调用到Onload.cpp中的callFunction，最后通过javascriptCore，调用BatchedBridge.js，根据参数｛moduleID,methodID｝require相应Js模块执行

Js -> Java：JS不主动传递数据调用Java。在需要调用调Java模块方法时，会把参数｛moduleID,methodID｝等数据存在MessageQueue中，等待Java的事件触发，再把MessageQueue中的｛moduleID,methodID｝返回给Java，再根据模块注册表找到相应模块处理。










MainApplication
	ReactNativeHost
		MainApplication 
		getPackages()
ReactActivity
	ReactActivityDelegate
		ReactActivity
		getMainComponentName()
		PermissionAwareActivity...
		DefaultHardwareBackBtnHandler...
	onXxx...


ReactActivity.onCreate
	debug && sdk > 22 check OverlayPermission
		onActivityResult
			loadApp()
	else loadApp()
		createReactInstanceManager() 注：@1 可在 ReactNativeHost override
			MainApplication
			getJSMainModuleName = "index.android" @1
			getJSBundleFile = null @1
			getBundleAssetName = "index.android.bundle" @1
			debug = null @1
			getRedBoxHandler = null @1
			new JSCJavaScriptExecutorFactory() @1
			new UIImplementationProvider() @1
			getInitialLifecycleState
			getPackages @1
			new JSBundleLoader()
				jniLoadScriptFromAssets
				jniLoadScriptFromFile
			debug mDevSupportManager mDevSupportManager.startInspector();
			release new DisabledDevSupportManager()
			new ReactChoreographer()
				ChoreographerCompat.getInstance()
					sdk > 16 Choreographer.getInstance()
					else new Handler(Looper.getMainLooper())
				new ReactChoreographerDispatcher()
		mReactRootView = new ReactRootView() extends SizeMonitoringFrameLayout extends FrameLayout
		mReactRootView.startReactApplication
			mReactInstanceManager.createReactContextInBackground()
				onJSBundleLoadedFromServer()
				mDevSupportManager.handleReloadJS()
				mDevSupportManager.isPackagerRunning()
				recreateReactContextInBackgroundFromBundleLoader() 
					runCreateReactContextOnNewThread()
						new Thread(){...}.start()
							createReactContext()
								new ReactApplicationContext()
								setNativeModuleCallExceptionHandler()
								processPackages()
									nativeModuleRegistryBuilder.processPackage(reactPackage)
										createUIManager()
											new UIManagerModule()
												new EventDispatcher()
												createConstants()
												createUIImplementation()
													new UIImplementation()
														 new NativeViewHierarchyManager()
														 new UIViewOperationQueue()
														 	new DispatchUIFrameCallback()
									nativeModuleRegistryBuilder.build()
								new CatalystInstanceImpl.Builder()
									SoLoader.loadLibrary("reactnativejni")
									mReactQueueConfiguration
										MessageQueueThreadImpl
											mqt_main_ui MainLoop
											mqt_xxx some Loop @10
									new JavaScriptModuleRegistry()
										new JavaScriptModuleInvocationHandler()
									initializeBridge()
								catalystInstance.runJSBundle()
									mJSBundleLoader.loadScript()
								reactContext.initializeWithInstance(catalystInstance)
							setupReactContext()
								catalystInstance.initialize()
									mNativeModuleRegistry.notifyJSInstanceInitialized()
										xxxNativeModule.initialize()
								mDevSupportManager.onNewReactContextCreated(reactContext);
									resetCurrentContext()
										debug getJSModule()
										reloadSettings()
								moveToResumedLifecycleState()
									listener.onHostResume()
								attachRootViewToInstance @2
									uiManagerModule.addRootView(rootView)
    								new ThemedReactContext()
    								mUIImplementation.registerRootView(rootView, tag, themedRootContext)
			    					rootView.setRootViewTag(rootTag)
			    					rootView.runApplication()
    								catalystInstance.getJSModule(AppRegistry.class).runApplication(jsAppModuleName, appParams)
								listener.onReactContextInitialized()
			attachToReactInstanceManager()
				mReactInstanceManager.attachRootView(mReactRootView)
					rootView.removeAllViews();
    				rootView.setId(View.NO_ID)
    				attachRootViewToInstance() @2
    					uiManagerModule.addRootView(rootView)
    						new ThemedReactContext()
    						mUIImplementation.registerRootView(rootView, tag, themedRootContext)
    					rootView.setRootViewTag(rootTag)
    					rootView.runApplication()
    						catalystInstance.getJSModule(AppRegistry.class).runApplication(jsAppModuleName, appParams)
				new CustomGlobalLayoutListener() implements ViewTreeObserver.OnGlobalLayoutListener
					initDisplayMetrics()
	DoubleTapReloadRecognizer

FrameDisplayEventReceiver extends DisplayEventReceiver
	doFrame()
		DispatchUIFrameCallback.doFrameGuarded()
			dispatchPendingNonBatchedOperations()
				nextOperation.execute()
					mNativeViewHierarchyManager.createView()
			flushPendingBatches()
				mDispatchUIRunnables..run()
					nonBatchedOperations..run()
					batchedOperations..run()
					mNativeViewHierarchyManager.clearLayoutAnimation()
      		ReactChoreographer.getInstance().postFrameCallback()


mqt_native_modules @10
	NativeRunnable.run()
		JavaModuleWrapper.invoke()
			mUIImplementation.createView()
				mUIViewOperationQueue.enqueueCreateView()
					new CreateViewOperation()
					mNonBatchedOperations.addLast()

mReactInstanceManager

mDevSupportManager DevSupportManagerImpl implements DevSupportManager, PackagerCommandListener, DevInternalSettings.Listener

mCatalystInstance CatalystInstanceImpl implements CatalystInstance 
	mJSModuleRegistry
	mNativeModuleRegistry

mNativeViewHierarchyManager


@1 
@2 有两处  只会运行一处

