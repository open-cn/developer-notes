1、
补码的设计目的是:
    ⑴使符号位能与有效值部分一起参加运算,从而简化运算规则.
    ⑵使减法运算转换为加法运算,进一步简化计算机中运算器的线路设计 所有这些转换都是在计算机的最底层进行的，而在我们使用的汇编、C等其他高级语言中使用的都是原码。

2、
原码：在数值前直接加一符号位的表示法（0正1负）。
反码：正数的反码同原码；负数的反码是对其原码逐位取反，但符号位除外。1
补码：正数的补码同原码；负数的补码是对其反码+1，但不能影响符号位。

3、
1.二进制数中，两数的补码之和等于两数和的补码。
2.目前二进制数进行运算时使用补码，运行结果仍为补码。

3.正数的原、反、补码都一样。
4.负数的原、反、补码符号位都是1。
5.负数时，补码＝反码+1。
6.负数时，反码＝原码除符号位外其它数值取反（即该数的绝对值取反），即“0”变“1”，“1”变“0”。

7.在计算机中，有符号的数都是采用补码来表示的。
8.计算的时候，符号位也参与运算。


4、二进制数转换成十进制数
由二进制数转换成十进制数的基本做法是，把二进制数首先写成加权系数展开式，然后
按十进制加法规则求和。这种做法称为"按权相加"法。

5、十进制数转换为二进制数
由于整数和小数的转换方法不同，所以先整数和小数分别转换再合并
十进制整数  "除2取余，逆序排列"
十进制小数  "乘2取整，顺序排列"





在计算机系统中，数值一律用补码来表示和存储。原因在于，使用补码，可以将符号位和数值域统一处理；同时，加法和减法也可以统一处理。此外，补码与原码相互转换，其运算过程是相同的，不需要额外的硬件电路。

与& 同或运算 为非运算。

异或^运算， 不带进位的加法。
与0异或，为原值。与1...1异或为取反（符号也会变）。异或自身为0。
两个数按位异或意思就是从个位开始，一位一位的比。相同为0，不同为1。
两个数按位同或意思就是从个位开始，一位一位的比。相同为1，不同为0。
与0同或，为取反（符号也会变）。与1...1同或,为原值。同或自身为1...1。




javascript 中所有的按位操作符的操作数都会被转成补码（two's complement）形式的有符号32位整数。
按位与（ AND）	a & b	对于每一个比特位，只有两个操作数相应的比特位都是1时，结果才为1，否则为0。
按位或（OR）	a | b	对于每一个比特位，当两个操作数相应的比特位至少有一个1时，结果为1，否则为0。
按位异或（XOR）	a ^ b	对于每一个比特位，当两个操作数相应的比特位有且只有一个1时，结果为1，否则为0。
按位非（NOT）	~ a	反转操作数的比特位，即0变成1，1变成0。
左移（Left shift）	a << b	将 a 的二进制形式向左移 b (< 32) 比特位，右边用0填充。
有符号右移	a >> b	将 a 的二进制表示向右移 b (< 32) 位，丢弃被移出的位，并使用 最高位 0或1 在左侧填充。
无符号右移	a >>> b	将 a 的二进制表示向右移 b (< 32) 位，丢弃被移出的位，并使用 0 在左侧填充。

java中位数由数据类型来定？


