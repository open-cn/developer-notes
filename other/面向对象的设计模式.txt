面向对象设计模式体现的就是抽象的思想，类是对对象的抽象，抽象类是对类的抽象，接口是对行为的抽象。


单一职责原则

开放-封闭原则：软件实体（类、模块、函数等等）应该可以扩展，但是不可修改。
必须变化的部分使用抽象来隔离以后的同类变化。

依赖倒转原则：抽象不应该依赖细节，细节应该依赖于抽象；针对接口编程，不要对实现编程

里氏代换原则：一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且它察觉不出弗雷对象和子类对象的区别。也就是说，在软件里面，把父类都替换成它的子类，程序的行为没有变化 。

迪米特法则：如果两个类不比彼此直接通信，那么这两个类就不应当发生直接的相互作用。如果其中一个类需要调用另一个类的某一个方法的话，可以通过第三者转发这个调用。
在类的结构设计上，每一个类都应当尽量降低成员的访问权限。根本思想是强调了类之间的松耦合。

合成/聚合复用原则：尽量使用合成/聚合，而不是使用类继承。







创建型模式：创建型模式隐藏了这些类的实例是如何被创建和放在一起，整个系统关于这些对象所知道的是由抽象类所定义的接口。这样，创建型模式在创建了什么、谁创建它、它是怎么被创建的，以及何时创建这些方面提供了很大的灵活性。

简单工厂模式：不符合开放-封闭原则 

抽象工厂模式：提供一个创建一系列或相关依赖对象的接口，而无需指定它们具体的类。
用反射+配置文件+抽象工厂解决数据库访问时的可维护、可扩展问题。  数据库orm

建造者模式(Bulider)：将一个复杂对象的构建与它的表示分离，是得同样的构建过程可以创建不同的表示。
松耦合+指挥者 控制建造顺序。

工厂方法模式：定义一个用于创建对象的接口，让子类决定实例化哪一个类，工厂模式使一个类的实例化延迟到其子类。
开放封闭

原型模式：用原型实例指定创建对象的种类，并且通过拷贝这些原型创建新的对象。 数据集
建立相应数目的原型并克隆它们通常比每次用合适的状态手工实例化该类更方便一些。

单例模式：保证一个类仅有一个实例，并提供一个访问它的全局访问点。
单一职责








结构型模式：
适配器模式：将一个类的接口转换成客户希望的另外一个接口。Adapter模式使得原本由于接口不兼容而不能一起工作的那些类可以一起工作。
访问不同数据库

桥接模式：将抽象部分与它的实现部分分离，使它们都可以独立地变化。
用聚合来代替继承

组合模式：将对象组合成树形结构以表示‘部分-整体’的层次结构。组合模式使得用户对单个对象和组合对象的使用具有一致性。

装饰模式：动态地给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。

外观模式：为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。
完美体现了依赖倒转原则和迪米特法则。

享元模式：运用共享技术有效地支持大量细粒度的对象。

代理模式：为其他对象提供一种代理以控制对这个对象的访问。








行为型模式1：
观察者模式：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。
委托

模板方法模式：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。

命令模式：将一个请求封装为一个对象，从而使你可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。

状态模式：允许一个对象在其内部状态改变时改变它的行为，让对象看起来似乎修改了它的类。

职责链模式：使多个对象度有机会处理请求，从而避免请求的发送者和接收者之间的耦合关系。将这个对象练成一条链，并沿着这条链传递该请求，直到有一个对象处理它为止。







行为型模式2：
解释器模式：给定一个语言，定义它的文法的一种表示，并定义一个解释器，这个解释器使用该表示来解释语言中的句子。

中介者模式：用一个中介对象来封装一系列的对象交互。中介者使各对象不需要显示地相互引用，从而使其耦合松散，而且可以独立地改变它们之间的交互。

访问者模式：表示一个作用于某个对象结构中的各元素的操作。它使你可以在不改变各元素的类的前提下下定义作用于这些元素的新操作。

策略模式：定义一系列的算法，把它们一个个封装起来，并且使它们可相互替换。本模式使得算法可独立于使用它的客户而变化。

备忘录模式：在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态。这样以后就可将该对象恢复到原先保存的状态。状态数据量过大时比较耗内存资源。

迭代器模式：提供一种方法顺序访问一个聚合对象中各个元素，而又不暴露该对象的内部表示。




MVC 多种设计模式   架构模式