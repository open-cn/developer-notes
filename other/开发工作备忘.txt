	随着移动平台的发展和其应用的不断改善，质量成为决定成败的关键。用户要求他们选择安装的应用响应快、性能好，
如果某个应用不能提供卓越的功能和稳定的用户体验，那这样的应用注定会被很快卸载。

为应用“瘦身”的十条建议

1）首先要有良好的编码习惯
	一个优秀的开发者应该善于运用常识、完善的算法和标准设计模式。要有资源意识，打开了就要记得关闭，
尽量做到晚获取，早释放。这些由来已久的编码准则同样适用Android应用开发，尤其是使用基础设备服务时。

2）让阻塞操作远离主UI线程
	通过使用AsyncTask、线程、IntentService和自定义后台服务，保证应用的灵活性。使用加载工具简化游标等长时间
加载数据的状态管理。当有其他程序运行时，不能让你的应用滞后或中止。
	如果一个操作需要消耗较多时间和资源时，取消该操作，换成异步处理，这样应用就能保持响应，用户可以继续各种
操作。该方法适用磁盘读写、访问内容提供方、数据库和互联网，以及解析和其他需要花费较长时间的任务。

3）使用最新的Android SDK版本和API
	使用Android平台的最新产品，保证你的应用紧跟Android的更新步伐。随着Android平台的不断发展，部分功能可能
被弃用或被更好的功能 取代，核心API接收了bug修复和性能改进，新API有助于开发者编写出更稳定的应用。要明白最佳
的做法总是随着时间的推移而变，聪明的开发者应该总是 站在整个平台的最前沿。

4）考虑使用StrictMode
	从Android 2.3开始提供了一个新的类StrictMode，该类可以用于捕捉发生在应用程序主线程中耗时的磁盘、网络访问
或函数调用，可以帮助开发者改进程序，使主线程处理UI和动画在磁盘读写和网络操作时变得更平滑，避免主线程被阻塞。

5）发布前禁用或尽量减少调试
	如果开发周期较长，你很可能在应用中内置了一些日志或调试代码，在发布前确保这些功能已经最小化或完全禁用。

6）确保UI布局简单优雅
	简单的屏幕不仅方便阅读，还能加快加载速度。与其在一个单一屏幕上堆砌太多不必要的功能，不如花时间去开发优
雅的用户界面。简单优雅的UI不仅能提高应用性能，还能提高用户使用该应用时的效率。

7）根据目标设备调整应用资源
	为尽可能高效地被加载，需要根据具体设备的配置调整相应资源，尤其是图片资源。为使应用包文件合理适用不同设
备，首先可只添加运行该应用需要的核心资源，然后再根据具体设备下载相关内容。

8）使用Hierachy Viewer可视化调试工具
	Hierachy Viewer能很方便地在开发者设计，调试和调整界面时，快速定位问题，解决问题，提高开发效率。

9）使用layoutopt进行布局优化
	Layoutopt是一款简单的命令行工具，可帮助找到不必要的控件嵌套以及缩减布局资源，从而使应用变得可能“苗条”。
控件越少、布局层次越浅，性能就越好。

10）使用Traceview及其他Android工具进行分析
	Android SDK随带了很多用于应用分析的工具，其中最受欢迎的是Traceview，这款图形工具可以帮助调试和找到应用
中的性能瓶颈。


最受开发者喜爱的五个Android库
1.Gson/JSON，相较XML，轻量级的JSON要简单的多。
2.RETROFIT?不懂
3. EVENTBUS 是用于简化应用中各个部件之间通信的一个库。比如从一个Activity发送消息到一个正在运行的服务，亦或
是片段之间简单的互动。
4. ACTIVEANDROID 算是一个轻量级的ORM（对象关系映射），让你无需编写一个单独的SQL语句，就可以保存和检索SQLite数据
库记录。每个数据库记录都被包裹整齐地归为一类，如delete（）和save（）的方法。
5. UNIVERSAL IMAGE LOADERUIL是是一个开源项目，其目的就是提供一个可重复使用的仪器为异步图像加载、缓存和显示。
它的使用很简单：imageLoader.displayImage(imageUri, imageView);尽管Picasso拥有更好的API，但其缺乏自定义。
而使用UIL构建器几乎可以配置所有（其中最重要的就是在抓取和缓存大型图片时，Picasso会失败）






