
CSS 指层叠样式表 (Cascading Style Sheets)

在 20 世纪 90 年代初，HTML 语言诞生。早期的 HTML 只含有少量的显示属性，用来设置网页和字体的效果。

1994 年初，哈坤·利提出了 CSS 的最初建议。伯特·波斯（Bert Bos）当时正在设计一款 Argo 浏览器，于是他们一拍即合，决定共同开发 CSS。
1996 年底，CSS 语言正式完成，同年 12 月，CSS 的第一个版本正式出版（https://www.w3.org/TR/CSS1/）。
1998 年 5 月，CSS2 版本正式出版（https://www.w3.org/TR/CSS2/）。

CSS3 的开发工作在 2000 年之前就开始了

考虑到从 CSS2 到 CSS3 发布时间会很长，2002 年工作组启动了 CSS2.1 的开发。这是 CSS2 的修订版，它纠正了 CSS2 版本中的一些错误，并且更加精确地描述了 CSS 的浏览器实现。

2004 年，CSS2.1 正式发布，到 2006 年底得到完善。CSS2.1 成为了目前最流行、获得浏览器支持最完整的版本（有些较老的浏览器并不支持 CSS3，比如 IE8 及其以下版本）。

2004 年 10 月，闪客帝国（http://www.flashempire.com）采用 Web 标准对网站进行了重构。闪客帝国网站于 2005 年完成了全部 CSS 布局，作为国内第一个大型应用案例，虽然还在很多问题，但其在 CSS 标准化实践方面带来了很多宝贵经验。


【创建】
<head><link rel="stylesheet" type="text/css" href="style.css" /></head>

多重样式将层叠为一个
1.浏览器缺省设置
2.外部样式表
3.内部样式表（位于 <head> 标签内部）
4.内联样式（在 HTML 元素内部）拥有最高的优先权




【CSS 语法】selector {declaration1; declaration2; ... declarationN }
CSS 规则由两个主要的部分构成：选择器，以及一条或多条声明。需要用分号将每个声明分开。使用花括号来包围声明。

如果声明的值为若干单词，则要给值加引号：p {font-family: "sans serif";}

是否包含空格不会影响 CSS 在浏览器的工作效果，同样，与 XHTML 不同，CSS 对大小写不敏感。不过存在一个例外：如果涉及到与 HTML 文档一起工作的话，class 和 id 名称对大小写是敏感的。


派生选择器(css2)    li strong { xxx }
    css1 中称之为上下文选择器 (contextual selectors)
id 选择器 #red { color:red; }
    注意：id 属性只能在每个 HTML 文档中出现一次。
类选择器  .center {text-align: center}
    注意：类名的第一个字符不能使用数字！它无法在 Mozilla 或 Firefox 中起作用。
属性选择器 [title] { ... }    [title=W3School] { ... }    a[href=#] { ... }
  注意：只有在规定了 !DOCTYPE 时，IE7 和 IE8 才支持属性选择器。在 IE6 及更低的版本中，不支持属性选择。

元素选择器 html { ... }  p { ... }
后代选择器 body p { ... }
子元素选择器 h1 > strong { ... }
相邻兄弟选择器 h1 + p { margin-top:50px; } 指代 跟随 h1 后面的 p 元素


伪类
    伪类可以与 CSS 类配合使用 selector.class : pseudo-class {}
    :first-child
    :focus
    :lang
    锚伪类
        a:link {color: #FF0000}		/* 未访问的链接 */
        a:visited {color: #00FF00}	/* 已访问的链接 */
        a:hover {color: #FF00FF}	/* 鼠标移动到链接上 */
        a:active {color: #0000FF}	/* 选定的链接 */
提示：在 CSS 定义中，a:hover 必须被置于 a:link 和 a:visited 之后，才是有效的。
提示：在 CSS 定义中，a:active 必须被置于 a:hover 之后，才是有效的。
提示：伪类名称对大小写不敏感。


伪元素
    伪元素可以与 CSS 类配合使用 p.article:first-letter {}
    :before  在元素的内容前面插入新内容
    :after   在元素的内容后面插入新内容
    :first-line 块级元素 首行设置特殊样式
    :first-letter 块级元素 首字母设置特殊样式




选择器的分组
    分享相同的声明。
    用逗号将需要分组的选择器分开。h1,h2,h3,h4,h5,h6 { xxx }
通配选择器（universal selector） * {...}
    id 选择器和 类选择器 前面都是省略了 * 通配符

多类选择器 .class1.class2 { ... } 注意与后代选择器的区别 这里没有后代关系






选择器的优先级

特指度（specificity）。特指度表示一个css选择器表达式的重要程度。

内联样式 优先级最高
选择器中 id数量多的高于数量少的
除了 ID、标签和伪元素以外的其它选择器数量 数量多的高于数量少的
标签和伪元素 数量多的高于数量少的

important > 内联 > ID > 类 > 标签 | 伪元素 | 伪类 | 属性选择 > 通配符 > 继承

当两条相互冲突的带有 !important 规则的声明被应用到相同的元素上时，拥有更大优先级的声明将会被采用。相同优先级，则后者会被采用。

破坏了样式表中的固有的级联规则 使得调试找bug变得更加困难了。慎用 !important。


【CSS 样式】
CSS 背景
CSS 文本
CSS 字体
CSS 链接
CSS 列表
CSS 表格
CSS 轮廓



【CSS 框模型】
框模型 (Box Model) 规定了元素框处理元素内容、内边距、边框 和 外边距 的方式。
width 和 height 指的是内容区域的宽度和高度。增加内边距、边框和外边距不会影响内容区域的尺寸，但是会增加元素框的总尺寸。
提示：背景应用于由内容和内边距、边框组成的区域。
提示：内边距、边框和外边距可以应用于一个元素的所有边，也可以应用于单独的边。
提示：外边距可以是负值，而且在很多情况下都要使用负值的外边距。
提示：IE5.X 和 6 在怪异模式中使用自己的非标准模型。这些浏览器的 width 属性不是内容的宽度，而是内容、内边距和边框的宽度的总和。


边框与背景
CSS 规范指出，边框绘制在“元素的背景之上”。这很重要，因为有些边框是“间断的”（例如，点线边框或虚线框），元素的背景应当出现在边框的可见部分之间。
CSS2 指出背景只延伸到内边距，而不是边框。后来 CSS2.1 进行了更正：元素的背景是内容、内边距和边框区的背景。大多数浏览器都遵循 CSS2.1 定义，不过一些较老的浏览器可能会有不同的表现。


CSS3 box-sizing 属性
content-box
这是由 CSS2.1 规定的宽度高度行为。宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框。
border-box
为元素设定的宽度和高度决定了元素的边框盒。
就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。
通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。


padding 不允许使用负值
border-style 的默认值是 none 若要使用边框，就必须声明一个边框样式。但若只要圆角，那么此属性不是必需的
外边距合并  只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。



【CSS 继承】
根据 CSS，子元素从父元素继承属性。但是它并不总是按此方式工作。
块元素一般默认继承父元素的宽度，但该块元素同时也是浮动或定位元素时不会继承父元素的宽度。


【CSS 定位和浮动】定位 (Positioning) 属性允许你对元素进行定位。
一切皆为框
div、h1 或 p 元素常常被称为块级元素。这意味着这些元素显示为一块内容，即“块框”。与之相反，span 和 strong 等元素称为“行内元素”，这是因为它们的内容显示在行中，即“行内框”。

通过将 display 属性设置为 block，可以让行内元素（比如 <a> 元素）表现得像块级元素一样。还可以通过把 display 设置为 none，让生成的元素根本没有框。这样的话，该框及其所有内容就不再显示，不占用文档中的空间。

无名块框


CSS 有三种基本的定位机制：普通流、浮动和绝对定位。

position 属性值的含义：
static    元素框正常生成。

块级元素生成一个矩形框，作为文档流的一部分，行内元素则会创建一个或多个行框，置于其父元素中。
忽略 top, bottom, left, right 或者 z-index 声明。


relative  元素框偏移某个距离。

元素仍保持其未定位前的形状，它原本所占的空间仍保留。
相对定位实际上被看作普通流定位模型的一部分，因为元素的位置相对于它在普通流中的位置。


absolute  元素框从文档流完全删除，并相对于其包含块定位。
包含块可能是文档中的另一个元素或者是初始包含块。
元素原先在正常文档流中所占的空间会关闭，就好像元素原来不存在一样。
元素定位后生成一个块级框，而不论原来它在正常流中生成何种类型的框。
相对于 static 定位以外的第一个父元素进行定位。元素的位置通过 "left", "top", "right" 以及 "bottom" 属性进行规定。


fixed     元素框的表现类似于将 position 设置为 absolute，不过其包含块是视窗本身（viewport）。
当元素祖先的 transform, perspective 或 filter 属性非 none 时，容器由视口改为该祖先。

inherit	从父元素继承 position 属性值。


浮动不完全是定位，不过，它当然也不是正常流布局。
如果父级元素设置了 transform 属性，position:relative/absolute/fixed会基于此定位




【CSS 对齐】
水平对齐
使用 margin 属性来水平对齐
margin-left:auto;
margin-right:auto;

使用 position:absolute 和 left、right 进行左和右对齐

使用 float 属性来进行左和右对齐


【CSS 导航条】

【CSS 图片库】

【CSS 图像透明度】

【CSS2 媒介类型】

【CSS 单位】
%	百分比
in	英寸
cm	厘米
mm	毫米
em
	1em 等于当前的字体尺寸。
	2em 等于当前字体尺寸的两倍。
	例如，如果某元素以 12pt 显示，那么 2em 是24pt。
	在 CSS 中，em 是非常有用的单位，因为它可以自动适应用户所使用的字体。

rem 1rem 等于根元素html的字体尺寸。此字体大小会被浏览器中字体大小的设置影响，除非显式的在html为font-size重写一个单位。
ex	一个 ex 是一个字体的 x-height。 (x-height 通常是字体尺寸的一半。)
pt	磅 (1 pt 等于 1/72 英寸)
pc	12 点活字 (1 pc 等于 12 点)
px	像素 (计算机屏幕上的一个点)







cursor 属性规定要显示的光标的类型（形状）。鼠标指针放在一个元素边界范围内时所用的光标形状（不过 CSS2.1 没有定义由哪个边界确定这个范围）。
'pointer' 光标呈现为指示链接的指针（一只手）


绝对定位的子元素会从内向外寻找有定位的父元素，找不到的话 overflow:hidden 会随之失效。

